@page "/users/{Username}"

@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using SocialPlatformBlazor.Client.Components
@using SocialPlatformBlazor.Shared.ViewModels.Posts
@using SocialPlatformBlazor.Shared.ViewModels.Users
@using SocialPlatformBlazor.Client.Services

@inject PostsService postsService
@inject UserService userService

<div class="mx-auto">
    <PageTitle>User Profile | SPB</PageTitle>
    @if (UserProfileModel != null)
    {
        <div class="user-profile-images-container">
            <div class="background-image-container">
                <span>
                    <img src="@(UserProfileModel.BackgroundImagePath ?? "/images/default-background-image.png")"
                     class="user-profile-images background-profile-image" />
                </span>
            </div>
            <div class="main-image-container mx-auto">
                <span class="span-main-image-container">
                    <img src="@(UserProfileModel.MainImagePath ?? "/images/blank-profile-picture-973460_1280.png")"
                     class="user-profile-images main-profile-image" />
                </span>
            </div>

        </div>
        <div class="user-profile-user-info">
            <h1 class="text-center fs-2">@(UserProfileModel.FirstName + " " + UserProfileModel.LastName)</h1>
            <div class="follow-info">
                <span class="fs-5 me-3">Followers: @UserProfileModel.Followers</span>
                @if (LoggedInUserInfo != null && LoggedInUserInfo.UserName != Username)
                {
                    <button class="btn btn-primary"
                    @onclick="() => (FollowOrUnfollowUser(UserProfileModel.UserName))">
                        @(UserProfileModel.IsFollowed ? "Unfollow" : "Follow")
                    </button>
                }
            </div>
        </div>
    }
    <div class="newsfeed">
        @if (Posts != null)
        {
            @foreach (var post in Posts)
            {
                <PostInFeed Post="post" />
            }
        }
        <InfiniteScrolling ItemsProvider="GetItems">
            <ItemTemplate Context="item">
                <PostInFeed Post="item" />
            </ItemTemplate>
            <LoadingTemplate>
                <div>Loading...</div>
            </LoadingTemplate>
        </InfiniteScrolling>

    </div>

</div>


@code {
    private int currentLastPost = 10;

    private int loadPostsCount = 10;

    private bool isAllCaughtUp = false;

    [CascadingParameter(Name = "UserData")]
    public BaseUserInfoModel LoggedInUserInfo { get; set; }

    [Parameter]
    public string? Username { get; set; }

    public UserProfileModel? UserProfileModel { get; set; }

    private IEnumerable<PostInFeedViewModel>? Posts { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        if (UserProfileModel != null && Username == UserProfileModel.UserName)
        {
            return;
        }
        this.UserProfileModel = await userService.GetUserProfileAsync(Username);
        this.Posts = await postsService.LoadUserPostsAsync(Username);
        Console.WriteLine(UserProfileModel.BackgroundImagePath);
        StateHasChanged();
    } 

    async Task<IEnumerable<PostInFeedViewModel>> GetItems(InfiniteScrollingItemsProviderRequest request)
    {
        if (Username == null)
        {
            return new List<PostInFeedViewModel>();
        }
        var posts = await postsService.LoadUserPostsAsync(Username, currentLastPost);
        if (posts != null)
        {
            currentLastPost += loadPostsCount;
            return posts;
        }
        return new List<PostInFeedViewModel>();

    }

    async Task FollowOrUnfollowUser(string username)
    {
        var result = await userService.FollowUserAsync(username);
        if (result && UserProfileModel != null)
        {
            if (UserProfileModel.IsFollowed)
            {
                UserProfileModel.Followers--;
            }
            else
            {
                UserProfileModel.Followers++;
            }
            UserProfileModel.IsFollowed = !UserProfileModel.IsFollowed;

        }
    }

}
